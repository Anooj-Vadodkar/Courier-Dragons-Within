//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/PlayerInputSchemeNewBackup.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSchemeNewBackup : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSchemeNewBackup()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSchemeNewBackup"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""be276bf4-7bf5-45d5-bc4a-e728c6d87941"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c002fc71-fdbe-4c48-aab5-2a5d7dbcb722"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""babcb215-8a43-474f-aaf9-b626eb61cef5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""60b4ae2f-3407-423c-9fac-68941cd38ff4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BunnyHop"",
                    ""type"": ""Button"",
                    ""id"": ""d982b824-1082-4b19-9904-89624560b314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f803843-72f0-470e-bcd1-9dacd7717de7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Breath"",
                    ""type"": ""Button"",
                    ""id"": ""e8c5617a-66dd-47e4-93ef-e4367938a1f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dismount"",
                    ""type"": ""Button"",
                    ""id"": ""5bd0b2ec-8f80-4b04-a45f-9a773e957c06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""1d3a2b22-e934-4b8b-9977-1b21b2ffccae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978bfe49-cc26-4a3d-ab7b-7d7a29327403"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""0665e852-a64a-402f-857f-0d0d47ea439a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b661da56-be5b-4272-8a21-3d3245d82280"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""faed4e58-7ea4-462a-a74e-b03148623b21"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7d5364f7-e611-4ea3-9495-3d7c9cc21fe8"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a97de5f7-6a8c-4623-8c48-76114d9b73ae"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""43ca3af6-a105-4f12-9d6a-47c15ba43ceb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c7a982-5889-4307-a11a-ce0364981685"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c5a712d-9bc4-4e60-abf9-514644c02ea7"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d5352e6-64a0-4f9f-a909-46dfa5f84cbf"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e35876b3-f655-4ac4-97c6-b287679b0f00"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BunnyHop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd87f3e4-7b9b-4ff8-a91e-a0abcecdd00e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79fc38bc-3946-46a2-9149-518d5284a015"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77c68012-ba54-4ddd-9e6d-a99c238bf67f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Breath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4a19b10-4563-4cea-b5b1-1d749f6094ad"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dismount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242a8344-3d15-428a-a385-39e6e52421b3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Dismount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47f5957d-eba9-4350-b0aa-6f55374550e0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""be7398c1-88b2-4403-bd56-741374b72a55"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e65c09be-2423-4a0a-8cfc-ef84a4e2f3f4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""09bd7a09-0ae0-45a5-8364-97f8ee0c2604"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7adbd1a4-9bdf-434e-8544-a674f87ec3c6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b6422d8-d9c7-4f0f-8638-381a6274ca3f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9db763c4-c27e-4afb-b201-355e1d4f8ee0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2816537-84e1-48b6-ba5f-f94f2e1c8e36"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""22414102-44c0-4a66-baf9-1b6d4601edb5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fea2c4d2-5176-40e3-8e36-c2a52a5adb10"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68c0f430-1903-4b3a-ac74-efa75b6f0984"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""BunnyHop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa994e24-c147-48fd-a2e3-49883b3898c0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Breath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""98e43f78-c086-4602-8149-2a92eae3f820"",
            ""actions"": [
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""6f7ab25e-7b62-4f56-9710-5e3c8be83b7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MediScene"",
                    ""type"": ""Button"",
                    ""id"": ""4786b151-92bf-4417-aa5e-41e0a2557993"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BikingConvoScene"",
                    ""type"": ""Button"",
                    ""id"": ""af613f69-e46d-458f-854e-b5c09a76b0f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""6451b5d5-397a-4300-8cee-7cb3d799d216"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confront"",
                    ""type"": ""Button"",
                    ""id"": ""e85ce6ee-682c-4c4e-a22e-c84cc2f4b705"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""43151d71-813e-48f2-adc3-748afd0b9465"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpToBike"",
                    ""type"": ""Button"",
                    ""id"": ""b10b6620-5c4e-4e68-b831-d837e26a61b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpToConvo"",
                    ""type"": ""Button"",
                    ""id"": ""1192d9aa-82e8-48e3-8f41-ea1046b32150"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PathTest"",
                    ""type"": ""Button"",
                    ""id"": ""caa895ca-4eba-4d65-b3ac-545c048cb1f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConvoNav1Debug"",
                    ""type"": ""Button"",
                    ""id"": ""1c3950b4-130d-48d4-9572-34c22e69fb1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConvoNav2Debug"",
                    ""type"": ""Button"",
                    ""id"": ""500eb758-9024-4b77-b32a-a1b8991c2457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CaveDebug"",
                    ""type"": ""Button"",
                    ""id"": ""b3507cad-6be2-4888-81e2-99a1dec72abc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walking2Debug"",
                    ""type"": ""Button"",
                    ""id"": ""dd59b00e-0899-496f-99d9-1a300a29eeec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walking4Debug"",
                    ""type"": ""Button"",
                    ""id"": ""0e97d2fe-4807-4978-b5cd-a626a2ec807b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VistaTWoDebug"",
                    ""type"": ""Button"",
                    ""id"": ""921afd89-8c41-484b-bc02-6958c52ea76b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc0c3820-b1d0-4c37-bb55-e8589ce2f9b2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb6d0703-651f-4115-8a03-6d799cbca947"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MediScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7948775-a223-4098-9d56-b9c0a9a740cd"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""BikingConvoScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a53657b-44b2-4262-952e-bae9960a4d88"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c8d3294-0c5a-48b7-9303-a5573dd777df"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Confront"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bc4da28-5345-49bb-a6c8-31962f226c3f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f13d01a-d815-4ba7-907a-32612d84bf02"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JumpToBike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""238a422b-77be-4bee-985a-b19d8d577bba"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpToConvo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb7983f-d8f6-456c-8a6d-81107b64d80f"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PathTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3cf0077-642a-426b-9aff-23649a12f729"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ConvoNav1Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd1f8f46-77f0-4302-89df-9efc544e40ef"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ConvoNav2Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51e17904-a08f-428d-9d6f-357bea85df57"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CaveDebug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eff8fb9e-d1ae-4ae3-92ae-e1db2bff011a"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking2Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b26af92b-3e74-42d5-b443-164031188640"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking4Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b0f724a-dac5-4503-ad8f-0f314b065350"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VistaTWoDebug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Restart = m_Player.FindAction("Restart", throwIfNotFound: true);
        m_Player_BunnyHop = m_Player.FindAction("BunnyHop", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Breath = m_Player.FindAction("Breath", throwIfNotFound: true);
        m_Player_Dismount = m_Player.FindAction("Dismount", throwIfNotFound: true);
        m_Player_Click = m_Player.FindAction("Click", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_Reload = m_Debug.FindAction("Reload", throwIfNotFound: true);
        m_Debug_MediScene = m_Debug.FindAction("MediScene", throwIfNotFound: true);
        m_Debug_BikingConvoScene = m_Debug.FindAction("BikingConvoScene", throwIfNotFound: true);
        m_Debug_Quit = m_Debug.FindAction("Quit", throwIfNotFound: true);
        m_Debug_Confront = m_Debug.FindAction("Confront", throwIfNotFound: true);
        m_Debug_Newaction = m_Debug.FindAction("New action", throwIfNotFound: true);
        m_Debug_JumpToBike = m_Debug.FindAction("JumpToBike", throwIfNotFound: true);
        m_Debug_JumpToConvo = m_Debug.FindAction("JumpToConvo", throwIfNotFound: true);
        m_Debug_PathTest = m_Debug.FindAction("PathTest", throwIfNotFound: true);
        m_Debug_ConvoNav1Debug = m_Debug.FindAction("ConvoNav1Debug", throwIfNotFound: true);
        m_Debug_ConvoNav2Debug = m_Debug.FindAction("ConvoNav2Debug", throwIfNotFound: true);
        m_Debug_CaveDebug = m_Debug.FindAction("CaveDebug", throwIfNotFound: true);
        m_Debug_Walking2Debug = m_Debug.FindAction("Walking2Debug", throwIfNotFound: true);
        m_Debug_Walking4Debug = m_Debug.FindAction("Walking4Debug", throwIfNotFound: true);
        m_Debug_VistaTWoDebug = m_Debug.FindAction("VistaTWoDebug", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Restart;
    private readonly InputAction m_Player_BunnyHop;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Breath;
    private readonly InputAction m_Player_Dismount;
    private readonly InputAction m_Player_Click;
    public struct PlayerActions
    {
        private @PlayerInputSchemeNewBackup m_Wrapper;
        public PlayerActions(@PlayerInputSchemeNewBackup wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Restart => m_Wrapper.m_Player_Restart;
        public InputAction @BunnyHop => m_Wrapper.m_Player_BunnyHop;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Breath => m_Wrapper.m_Player_Breath;
        public InputAction @Dismount => m_Wrapper.m_Player_Dismount;
        public InputAction @Click => m_Wrapper.m_Player_Click;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Restart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRestart;
                @BunnyHop.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBunnyHop;
                @BunnyHop.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBunnyHop;
                @BunnyHop.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBunnyHop;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Breath.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreath;
                @Breath.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreath;
                @Breath.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBreath;
                @Dismount.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismount;
                @Dismount.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismount;
                @Dismount.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDismount;
                @Click.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @BunnyHop.started += instance.OnBunnyHop;
                @BunnyHop.performed += instance.OnBunnyHop;
                @BunnyHop.canceled += instance.OnBunnyHop;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Breath.started += instance.OnBreath;
                @Breath.performed += instance.OnBreath;
                @Breath.canceled += instance.OnBreath;
                @Dismount.started += instance.OnDismount;
                @Dismount.performed += instance.OnDismount;
                @Dismount.canceled += instance.OnDismount;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_Reload;
    private readonly InputAction m_Debug_MediScene;
    private readonly InputAction m_Debug_BikingConvoScene;
    private readonly InputAction m_Debug_Quit;
    private readonly InputAction m_Debug_Confront;
    private readonly InputAction m_Debug_Newaction;
    private readonly InputAction m_Debug_JumpToBike;
    private readonly InputAction m_Debug_JumpToConvo;
    private readonly InputAction m_Debug_PathTest;
    private readonly InputAction m_Debug_ConvoNav1Debug;
    private readonly InputAction m_Debug_ConvoNav2Debug;
    private readonly InputAction m_Debug_CaveDebug;
    private readonly InputAction m_Debug_Walking2Debug;
    private readonly InputAction m_Debug_Walking4Debug;
    private readonly InputAction m_Debug_VistaTWoDebug;
    public struct DebugActions
    {
        private @PlayerInputSchemeNewBackup m_Wrapper;
        public DebugActions(@PlayerInputSchemeNewBackup wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reload => m_Wrapper.m_Debug_Reload;
        public InputAction @MediScene => m_Wrapper.m_Debug_MediScene;
        public InputAction @BikingConvoScene => m_Wrapper.m_Debug_BikingConvoScene;
        public InputAction @Quit => m_Wrapper.m_Debug_Quit;
        public InputAction @Confront => m_Wrapper.m_Debug_Confront;
        public InputAction @Newaction => m_Wrapper.m_Debug_Newaction;
        public InputAction @JumpToBike => m_Wrapper.m_Debug_JumpToBike;
        public InputAction @JumpToConvo => m_Wrapper.m_Debug_JumpToConvo;
        public InputAction @PathTest => m_Wrapper.m_Debug_PathTest;
        public InputAction @ConvoNav1Debug => m_Wrapper.m_Debug_ConvoNav1Debug;
        public InputAction @ConvoNav2Debug => m_Wrapper.m_Debug_ConvoNav2Debug;
        public InputAction @CaveDebug => m_Wrapper.m_Debug_CaveDebug;
        public InputAction @Walking2Debug => m_Wrapper.m_Debug_Walking2Debug;
        public InputAction @Walking4Debug => m_Wrapper.m_Debug_Walking4Debug;
        public InputAction @VistaTWoDebug => m_Wrapper.m_Debug_VistaTWoDebug;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @Reload.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnReload;
                @MediScene.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnMediScene;
                @MediScene.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnMediScene;
                @MediScene.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnMediScene;
                @BikingConvoScene.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnBikingConvoScene;
                @BikingConvoScene.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnBikingConvoScene;
                @BikingConvoScene.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnBikingConvoScene;
                @Quit.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnQuit;
                @Confront.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnConfront;
                @Confront.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnConfront;
                @Confront.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnConfront;
                @Newaction.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnNewaction;
                @JumpToBike.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToBike;
                @JumpToBike.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToBike;
                @JumpToBike.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToBike;
                @JumpToConvo.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToConvo;
                @JumpToConvo.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToConvo;
                @JumpToConvo.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnJumpToConvo;
                @PathTest.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnPathTest;
                @PathTest.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnPathTest;
                @PathTest.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnPathTest;
                @ConvoNav1Debug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav1Debug;
                @ConvoNav1Debug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav1Debug;
                @ConvoNav1Debug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav1Debug;
                @ConvoNav2Debug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav2Debug;
                @ConvoNav2Debug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav2Debug;
                @ConvoNav2Debug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnConvoNav2Debug;
                @CaveDebug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnCaveDebug;
                @CaveDebug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnCaveDebug;
                @CaveDebug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnCaveDebug;
                @Walking2Debug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking2Debug;
                @Walking2Debug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking2Debug;
                @Walking2Debug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking2Debug;
                @Walking4Debug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking4Debug;
                @Walking4Debug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking4Debug;
                @Walking4Debug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnWalking4Debug;
                @VistaTWoDebug.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnVistaTWoDebug;
                @VistaTWoDebug.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnVistaTWoDebug;
                @VistaTWoDebug.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnVistaTWoDebug;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @MediScene.started += instance.OnMediScene;
                @MediScene.performed += instance.OnMediScene;
                @MediScene.canceled += instance.OnMediScene;
                @BikingConvoScene.started += instance.OnBikingConvoScene;
                @BikingConvoScene.performed += instance.OnBikingConvoScene;
                @BikingConvoScene.canceled += instance.OnBikingConvoScene;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Confront.started += instance.OnConfront;
                @Confront.performed += instance.OnConfront;
                @Confront.canceled += instance.OnConfront;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @JumpToBike.started += instance.OnJumpToBike;
                @JumpToBike.performed += instance.OnJumpToBike;
                @JumpToBike.canceled += instance.OnJumpToBike;
                @JumpToConvo.started += instance.OnJumpToConvo;
                @JumpToConvo.performed += instance.OnJumpToConvo;
                @JumpToConvo.canceled += instance.OnJumpToConvo;
                @PathTest.started += instance.OnPathTest;
                @PathTest.performed += instance.OnPathTest;
                @PathTest.canceled += instance.OnPathTest;
                @ConvoNav1Debug.started += instance.OnConvoNav1Debug;
                @ConvoNav1Debug.performed += instance.OnConvoNav1Debug;
                @ConvoNav1Debug.canceled += instance.OnConvoNav1Debug;
                @ConvoNav2Debug.started += instance.OnConvoNav2Debug;
                @ConvoNav2Debug.performed += instance.OnConvoNav2Debug;
                @ConvoNav2Debug.canceled += instance.OnConvoNav2Debug;
                @CaveDebug.started += instance.OnCaveDebug;
                @CaveDebug.performed += instance.OnCaveDebug;
                @CaveDebug.canceled += instance.OnCaveDebug;
                @Walking2Debug.started += instance.OnWalking2Debug;
                @Walking2Debug.performed += instance.OnWalking2Debug;
                @Walking2Debug.canceled += instance.OnWalking2Debug;
                @Walking4Debug.started += instance.OnWalking4Debug;
                @Walking4Debug.performed += instance.OnWalking4Debug;
                @Walking4Debug.canceled += instance.OnWalking4Debug;
                @VistaTWoDebug.started += instance.OnVistaTWoDebug;
                @VistaTWoDebug.performed += instance.OnVistaTWoDebug;
                @VistaTWoDebug.canceled += instance.OnVistaTWoDebug;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnBunnyHop(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnBreath(InputAction.CallbackContext context);
        void OnDismount(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnReload(InputAction.CallbackContext context);
        void OnMediScene(InputAction.CallbackContext context);
        void OnBikingConvoScene(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
        void OnConfront(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
        void OnJumpToBike(InputAction.CallbackContext context);
        void OnJumpToConvo(InputAction.CallbackContext context);
        void OnPathTest(InputAction.CallbackContext context);
        void OnConvoNav1Debug(InputAction.CallbackContext context);
        void OnConvoNav2Debug(InputAction.CallbackContext context);
        void OnCaveDebug(InputAction.CallbackContext context);
        void OnWalking2Debug(InputAction.CallbackContext context);
        void OnWalking4Debug(InputAction.CallbackContext context);
        void OnVistaTWoDebug(InputAction.CallbackContext context);
    }
}
